[project]
name = "span"
dynamic = ["description", "authors", "license", "readme"]

[tool.poetry]
# integration version is managed in the manifest.json for HA
# version = "0.0.0"
description = "Span Panel Custom Integration for Home Assistant"
authors = ["SpanPanel"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.13.2,<3.14"
homeassistant = ">=2025.8.1"  # Pin to 2025.7 or higher to avoid slow resolution
span-panel-api = {path = "../span-panel-api", develop = true}
ha-synthetic-sensors = {path = "../ha-synthetic-sensors", develop = true}

[tool.poetry.group.dev.dependencies]
# Type stubs and dev-only tools that don't conflict with HA runtime
pytest = "^8.4.0"
pytest-asyncio = "^1.0.0"
pytest-homeassistant-custom-component = "*"
bandit = "^1.8.5"
pre-commit = "^4.0.0"
ruff = "^0.12.1"
mypy = "^1.15.0"
pyright = "*"
radon = "*"
pylint = "*"  # For import-outside-toplevel checks
prettier = "*"
isort = "*"
homeassistant-stubs = "*"
types-requests = "*"
types-PyYAML = "*"
voluptuous-stubs = "*"
python-direnv = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.jscpd]
path = ["custom_components/span_panel", "./*.{html,md}"]
format = ["python", "javascript", "json", "markup", "markdown"]
ignore = "custom_components/span_panel/translations/**|**/translations/**|.github/**|env/**|**/site-packages/**|**/.direnv/**"
reporters = ["console"]
output = "./jscpdReport"
gitignore = true

[tool.mypy]
platform = "linux"
show_error_codes = true
follow_imports = "normal"

# Type checking settings
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
local_partial_types = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
warn_return_any = true
strict_optional = true

# Package handling for HA custom integration
# mypy_path = "."
namespace_packages = false
explicit_package_bases = false

# Exclude patterns
exclude = [
    "venv/.*",
    ".venv/.*",
    "scripts/.*",
    "tests/.*",
    "test_.*\\.py"
]

# Error codes
enable_error_code = [
    "deprecated",
    "ignore-without-code",
    "redundant-self",
    "truthy-iterable",
    "mutable-override"
]
disable_error_code = [
    "annotation-unchecked",
    "import-not-found",
    "import-untyped",
    "override",
    "misc",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true



[tool.ruff]
line-length = 100
target-version = "py313"

# Exclude tests and scripts from linting checks but allow formatting
exclude = ["scripts/"]

[tool.ruff.lint]
select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler is an `except` clause that only reraises
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle (includes E402 - module level import not at top of file)
    "F",  # pyflakes/autoflake
    "I",  # isort - import sorting and organization
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Combine multiple with statements
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of conditional assignment
    "T20",  # flake8-print
    "TID",  # flake8-tidy-imports - import organization and toplevel checking
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
]

# Exclude tests from ALL linting checks (formatting still applies)
[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["ALL"]  # Disable all linting rules for test files (formatting only)
"debug_*.py" = ["T201", "D103", "D100", "E402", "TID252"]  # Allow print statements, missing docstrings, and imports inside functions in debug files
"tests/**/*.py" = ["ALL"]  # Disable all linting rules for test directory (formatting only)
"custom_components/span_panel/binary_sensor.py" = ["UP046"]  # Generic class uses Generic subclass
"custom_components/span_panel/sensor.py" = ["UP046"]  # Generic class uses Generic subclass

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B108"]  # Skip assert_used and hardcoded_tmp_directory for test files

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.format]
# Ruff is the primary formatter
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["custom_components", "span"]
force-sort-within-sections = true
combine-as-imports = true

[tool.coverage.run]
source = ["custom_components/span_panel"]
omit = ["tests/*"]
data_file = ".local_coverage_data"

[tool.pytest.ini_options]
# Configure pytest-asyncio to use function-scoped event loop
# This creates a fresh event loop for each test to avoid closure issues
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
