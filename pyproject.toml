[tool.poetry]
name = "span"
# integration version is managed in the manifest.json for HA
# version = "0.0.0"
description = "Span Panel Custom Integration for Home Assistant"
authors = ["SpanPanel"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.13.2,<3.14"
httpx = "^0.28.1"

[tool.poetry.group.dev.dependencies]
homeassistant-stubs = "*"
types-requests = "*"
ruff = "^0.11.8"
mypy = ">=1.8.0"
pyright = "^1.1.390"
bandit = "^1.7.4"
pre-commit = "^4.2.0"
pydantic = ">=2.0.0,<3.0.0"
voluptuous = ">=0.15.2"
voluptuous-stubs = "^0.1.1"
python-direnv = "^0.2.2"
prettier = "^0.0.7"
black = "^24.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.jscpd]
path = ["custom_components/span_panel", "./*.{html,md}"]
format = ["python", "javascript", "json", "markup", "markdown"]
ignore = "custom_components/span_panel/translations/**|**/translations/**|.github/**|env/**|**/site-packages/**|**/.direnv/**"
reporters = ["console"]
output = "./jscpdReport"
gitignore = true

[tool.mypy]
platform = "linux"
show_error_codes = true
follow_imports = "normal"

# Type checking settings
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
local_partial_types = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
warn_return_any = true
strict_optional = true

# Package handling for HA custom integration
mypy_path = "."
namespace_packages = false
explicit_package_bases = false

# Module search paths - set this explicitly to prevent duplicate module resolution
files = ["custom_components/span_panel"]

# Exclude patterns
exclude = [
    "venv/.*",
    ".venv/.*",
    "scripts/.*"
]

# Error codes
enable_error_code = [
    "deprecated",
    "ignore-without-code",
    "redundant-self",
    "truthy-iterable",
    "mutable-override"
]
disable_error_code = [
    "annotation-unchecked",
    "import-not-found",
    "import-untyped",
    "override",
    "misc",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
include = ["custom_components/span_panel"]
exclude = [
    "venv",
    ".venv",
    "scripts"
]
pythonPlatform = "Linux"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
autoSearchPaths = true
reportMissingImports = "warning"
reportMissingTypeStubs = false

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.black]
line-length = 88
target-version = ['py313']
exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | scripts
)/
'''

[tool.ruff.lint.isort]
known-first-party = ["custom_components", "span"]
force-sort-within-sections = true
combine-as-imports = true
