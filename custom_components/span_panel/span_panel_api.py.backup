"""Span Panel API - Updated to use span    def __init__(
        self,
        host: str,
        access_token: str | None = None,  # nosec
        options: Options | None = None,
        use_ssl: bool = False,
        scan_interval: int | None = None,
    ) -> None:
        """Initialize the Span Panel API."""
        self.host: str = host.lower()
        self.access_token: str | None = access_token
        self.options: Options | None = options
        self.scan_interval: int = scan_interval or 15  # Default to 15 seconds
        self.use_ssl: bool = use_ssl
        self._authenticated: bool = access_token is not Noneckage."""

from copy import deepcopy
import logging
from typing import Any
import uuid

from span_panel_api import SpanPanelClient
from span_panel_api.exceptions import (
    SpanPanelAPIError,
    SpanPanelAuthError,
    SpanPanelConnectionError,
    SpanPanelRetriableError,
    SpanPanelServerError,
    SpanPanelTimeoutError,
)

from .const import (
    API_TIMEOUT,
    PANEL_MAIN_RELAY_STATE_UNKNOWN_VALUE,
    CircuitPriority,
    CircuitRelayState,
    DEFAULT_API_RETRIES,
    DEFAULT_API_RETRY_TIMEOUT,
    DEFAULT_API_RETRY_BACKOFF_MULTIPLIER,
)
from .exceptions import SpanPanelReturnedEmptyData
from .options import Options
from .span_panel_circuit import SpanPanelCircuit
from .span_panel_data import SpanPanelData
from .span_panel_hardware_status import SpanPanelHardwareStatus
from .span_panel_storage_battery import SpanPanelStorageBattery

_LOGGER: logging.Logger = logging.getLogger(__name__)


class SpanPanelApi:
    """Span Panel API - Now using span-panel-api package."""

    def __init__(
        self,
        host: str,
        access_token: str | None = None,  # nosec
        options: Options | None = None,
        use_ssl: bool = False,
        scan_interval: int | None = None,
    ) -> None:
        """Initialize the Span Panel API."""
        self.host: str = host.lower()
        self.access_token: str | None = access_token
        self.options: Options | None = options
        self.scan_interval: int = scan_interval or 15  # Default to 15 seconds
        self.use_ssl: bool = use_ssl
        self._authenticated: bool = access_token is not None

        # Get retry configuration from options or use defaults
        if options:
            retries = options.api_retries
            retry_timeout = options.api_retry_timeout
            retry_backoff_multiplier = options.api_retry_backoff_multiplier
        else:
            retries = DEFAULT_API_RETRIES
            retry_timeout = DEFAULT_API_RETRY_TIMEOUT
            retry_backoff_multiplier = DEFAULT_API_RETRY_BACKOFF_MULTIPLIER

        # Let the library use default ports instead of hardcoding
        self._client: SpanPanelClient | None = SpanPanelClient(
            host=self.host,
            timeout=API_TIMEOUT,
            use_ssl=use_ssl,
            retries=retries,
            retry_timeout=retry_timeout,
            retry_backoff_multiplier=retry_backoff_multiplier,
            cache_window=self._calculate_cache_window(),
        )
        if self.access_token:
            self._client.set_access_token(self.access_token)
            self._authenticated = True

    def _calculate_cache_window(self) -> float:
        """Calculate optimal cache window based on polling interval.

        The cache window should be shorter than the polling interval to ensure
        fresh data on each coordinator update, while protecting against rapid
        successive API calls within the same update cycle.

        Returns:
            Cache window in seconds (60% of polling interval, minimum 1 second).

        """
        # Use 60% of the polling interval as cache window
        # This ensures fresh data on each poll while providing protection
        cache_window = self.scan_interval * 0.6
        # Ensure minimum 1 second cache window
        return max(cache_window, 1.0)

    def _ensure_client_open(self) -> None:
        # Check if client was explicitly closed
        if self._client is None:
            _LOGGER.debug(
                "[SpanPanelApi] Client was closed, cannot recreate after explicit close for host=%s",
                self.host,
            )
            raise SpanPanelAPIError("API client has been closed")

        client_obj = getattr(self._client, "_client", None)
        if client_obj is not None and getattr(client_obj, "is_closed", False):
            _LOGGER.warning(
                "[SpanPanelApi] Underlying httpx client is closed, recreating SpanPanelClient for host=%s (SSL=%s)",
                self.host,
                self.use_ssl,
            )

            # Get retry configuration from options or use defaults
            if self.options:
                retries = self.options.api_retries
                retry_timeout = self.options.api_retry_timeout
                retry_backoff_multiplier = self.options.api_retry_backoff_multiplier
            else:
                retries = DEFAULT_API_RETRIES
                retry_timeout = DEFAULT_API_RETRY_TIMEOUT
                retry_backoff_multiplier = DEFAULT_API_RETRY_BACKOFF_MULTIPLIER

            # Let the library use default ports instead of hardcoding
            self._client = SpanPanelClient(
                host=self.host,
                timeout=API_TIMEOUT,
                use_ssl=self.use_ssl,
                retries=retries,
                retry_timeout=retry_timeout,
                retry_backoff_multiplier=retry_backoff_multiplier,
                cache_window=self._calculate_cache_window(),
            )
            if self.access_token:
                self._client.set_access_token(self.access_token)

    def _debug_check_client(self, method_name: str) -> None:
        # Check if the client is in a closed or invalid state
        if self._client is None:
            _LOGGER.error(
                "[SpanPanelApi] Client is None in %s! This indicates a bug in the lifecycle management.",
                method_name,
            )
            return

        in_context = getattr(self._client, "_in_context", None)
        client_obj = getattr(self._client, "_client", None)
        is_closed = False
        if client_obj is not None:
            # httpx.AsyncClient has a .is_closed property
            is_closed = getattr(client_obj, "is_closed", False)
        _LOGGER.debug(
            "[SpanPanelApi] %s: _client=%s, _in_context=%s, client_obj=%s, is_closed=%s",
            method_name,
            type(self._client).__name__,
            in_context,
            type(client_obj).__name__ if client_obj else None,
            is_closed,
        )
        if is_closed:
            _LOGGER.error(
                "[SpanPanelApi] Attempting to use a closed client in %s! This will cause runtime errors.",
                method_name,
            )

    async def setup(self) -> None:
        """Initialize the API client (Long-Lived Pattern setup)."""
        _LOGGER.debug("[SpanPanelApi] Setting up API client for host=%s", self.host)
        try:
            # If we have a token, verify it works
            if self.access_token:
                _LOGGER.debug("[SpanPanelApi] Testing existing access token")
                await self.get_panel_data()  # Test authenticated endpoint
                self._authenticated = True
                _LOGGER.debug("[SpanPanelApi] Existing access token is valid")
            else:
                _LOGGER.debug("[SpanPanelApi] No access token provided during setup")
        except SpanPanelAuthError:
            _LOGGER.warning(
                "[SpanPanelApi] Access token invalid, will re-authenticate on first use"
            )
            self._authenticated = False
        except Exception as e:
            _LOGGER.error("[SpanPanelApi] Setup failed: %s", e)
            self._authenticated = False
            await self.close()  # Clean up on setup failure
            raise

    async def _ensure_authenticated(self) -> None:
        """Ensure we have valid authentication, re-authenticate if needed."""
        if not self._authenticated:
            _LOGGER.debug("[SpanPanelApi] Re-authentication needed")
            if self._client is None:
                raise SpanPanelAPIError("API client has been closed")
            try:
                # Generate a unique client name for re-authentication
                client_name = f"home-assistant-{uuid.uuid4()}"
                auth_response = await self._client.authenticate(
                    client_name, "Home Assistant Local Span Integration"
                )
                self.access_token = auth_response.access_token
                self._authenticated = True
                _LOGGER.debug("[SpanPanelApi] Re-authentication successful")
            except Exception as e:
                _LOGGER.error("[SpanPanelApi] Re-authentication failed: %s", e)
                raise SpanPanelAuthError(f"Re-authentication failed: {e}") from e

    async def ping(self) -> bool:
        """Ping the Span Panel API."""
        self._ensure_client_open()
        if self._client is None:
            return False
        # status endpoint doesn't require auth.
        try:
            await self.get_status_data()
            return True
        except (SpanPanelConnectionError, SpanPanelTimeoutError, SpanPanelAPIError):
            return False

    async def ping_with_auth(self) -> bool:
        """Test connection and authentication."""
        self._ensure_client_open()
        if self._client is None:
            return False
        try:
            # Use get_panel_data() since it requires authentication
            await self.get_panel_data()
            return True
        except SpanPanelAuthError:
            return False
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelReturnedEmptyData,
        ):
            return False

    async def get_access_token(self) -> str:
        """Get the access token."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        try:
            # Generate a unique client name
            client_name = f"home-assistant-{uuid.uuid4()}"
            auth_response = await self._client.authenticate(
                client_name, "Home Assistant Local Span Integration"
            )

            # Store the token
            self.access_token = auth_response.access_token
            return str(auth_response.access_token)

        except (SpanPanelConnectionError, SpanPanelAPIError) as e:
            raise SpanPanelReturnedEmptyData(f"Failed to get access token: {e}") from e

    async def get_status_data(self) -> SpanPanelHardwareStatus:
        """Get the status data."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("get_status_data")
        try:
            status_response = await self._client.get_status()

            # Convert the attrs model to dict and then to our data class
            status_dict = status_response.to_dict()  # type: ignore[attr-defined]
            status_data = SpanPanelHardwareStatus.from_dict(status_dict)
            return status_data

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error getting status data (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error getting status data (will not retry): %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to get status data: %s", e)
            raise

    async def get_panel_data(self) -> SpanPanelData:
        """Get the panel data."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("get_panel_data")
        try:
            await self._ensure_authenticated()
            panel_response = await self._client.get_panel_state()

            # Convert the attrs model to dict and deep copy before processing
            raw_data: Any = deepcopy(panel_response.to_dict())  # type: ignore[attr-defined]
            panel_data: SpanPanelData = SpanPanelData.from_dict(raw_data, self.options)

            # Span Panel API might return empty result.
            # We use relay state == UNKNOWN as an indication of that scenario.
            if panel_data.main_relay_state == PANEL_MAIN_RELAY_STATE_UNKNOWN_VALUE:
                raise SpanPanelReturnedEmptyData()

            return panel_data

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error getting panel data (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error getting panel data (will not retry): %s", e)
            raise
        except SpanPanelAuthError as e:
            # Reset auth flag and let coordinator handle retry
            self._authenticated = False
            _LOGGER.error("Authentication failed for panel data: %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to get panel data: %s", e)
            raise

    async def get_circuits_data(self) -> dict[str, SpanPanelCircuit]:
        """Get the circuits data."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("get_circuits_data")
        try:
            await self._ensure_authenticated()
            circuits_response = await self._client.get_circuits()

            # Extract circuits from the response
            raw_circuits_data = circuits_response.circuits.additional_properties  # type: ignore[attr-defined]

            if not raw_circuits_data:
                raise SpanPanelReturnedEmptyData()

            circuits_data: dict[str, SpanPanelCircuit] = {}
            for circuit_id, raw_circuit_data in raw_circuits_data.items():
                # Convert attrs model to dict
                circuit_dict = raw_circuit_data.to_dict()  # type: ignore[attr-defined]
                circuits_data[circuit_id] = SpanPanelCircuit.from_dict(circuit_dict)
            return circuits_data

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error getting circuits data (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error getting circuits data (will not retry): %s", e)
            raise
        except SpanPanelAuthError as e:
            # Reset auth flag and let coordinator handle retry
            self._authenticated = False
            _LOGGER.error("Authentication failed for circuits data: %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to get circuits data: %s", e)
            raise

    async def get_storage_battery_data(self) -> SpanPanelStorageBattery:
        """Get the storage battery data."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("get_storage_battery_data")
        try:
            await self._ensure_authenticated()
            storage_response = await self._client.get_storage_soe()

            # Extract SOE data from the response
            storage_battery_data = storage_response.soe.to_dict()  # type: ignore[attr-defined]

            # Span Panel API might return empty result.
            if not storage_battery_data:
                raise SpanPanelReturnedEmptyData()

            return SpanPanelStorageBattery.from_dict(storage_battery_data)

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error getting storage battery data (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error getting storage battery data (will not retry): %s", e)
            raise
        except SpanPanelAuthError as e:
            # Reset auth flag and let coordinator handle retry
            self._authenticated = False
            _LOGGER.error("Authentication failed for storage battery data: %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to get storage battery data: %s", e)
            raise

    async def set_relay(self, circuit: SpanPanelCircuit, state: CircuitRelayState) -> None:
        """Set the relay state."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("set_relay")
        try:
            await self._ensure_authenticated()
            await self._client.set_circuit_relay(circuit.circuit_id, state.name)

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error setting relay state (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error setting relay state (will not retry): %s", e)
            raise
        except SpanPanelAuthError as e:
            # Reset auth flag and let coordinator handle retry
            self._authenticated = False
            _LOGGER.error("Authentication failed for set relay: %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to set relay state: %s", e)
            raise

    async def set_priority(self, circuit: SpanPanelCircuit, priority: CircuitPriority) -> None:
        """Set the priority."""
        self._ensure_client_open()
        if self._client is None:
            raise SpanPanelAPIError("API client has been closed")
        self._debug_check_client("set_priority")
        try:
            await self._ensure_authenticated()
            await self._client.set_circuit_priority(circuit.circuit_id, priority.name)

        except SpanPanelRetriableError as e:
            _LOGGER.warning("Retriable error setting priority (will retry): %s", e)
            raise
        except SpanPanelServerError as e:
            _LOGGER.error("Server error setting priority (will not retry): %s", e)
            raise
        except SpanPanelAuthError as e:
            # Reset auth flag and let coordinator handle retry
            self._authenticated = False
            _LOGGER.error("Authentication failed for set priority: %s", e)
            raise
        except (
            SpanPanelConnectionError,
            SpanPanelTimeoutError,
            SpanPanelAPIError,
        ) as e:
            _LOGGER.error("Failed to set priority: %s", e)
            raise

    async def close(self) -> None:
        """Close the API client and clean up resources."""
        _LOGGER.debug("[SpanPanelApi] Closing API client for host=%s", self.host)
        if self._client is not None:
            try:
                await self._client.close()
            except Exception as e:
                _LOGGER.warning("Error closing API client: %s", e)
            finally:
                # Reset client reference to prevent further use
                self._client = None
